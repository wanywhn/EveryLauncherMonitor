/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp com.gitee.wanywhn.everylauncherMonitor.xml -i server.h -p ServerInterface
 *
 * qdbusxml2cpp is Copyright (C) 2017 The Qt Company Ltd.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef SERVERINTERFACE_H
#define SERVERINTERFACE_H

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>
#include "server.h"

/*
 * Proxy class for interface local.Server
 */
class LocalServerInterface: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "local.Server"; }

public:
    LocalServerInterface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = nullptr);

    ~LocalServerInterface();

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<> myrun()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("myrun"), argumentList);
    }

    inline QDBusPendingReply<> setWatchPaths(const QStringList &paths)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(paths);
        return asyncCallWithArgumentList(QStringLiteral("setWatchPaths"), argumentList);
    }

Q_SIGNALS: // SIGNALS
    void fileWrited(const QStringList &files);
};

namespace local {
  typedef ::LocalServerInterface Server;
}
#endif
